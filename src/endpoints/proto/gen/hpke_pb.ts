// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

// @generated by protoc-gen-es v1.5.0 with parameter "target=ts"
// @generated from file hpke.proto (package google.crypto.tink, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum google.crypto.tink.HpkeKem
 */
export enum HpkeKem {
  /**
   * @generated from enum value: KEM_UNKNOWN = 0;
   */
  KEM_UNKNOWN = 0,

  /**
   * @generated from enum value: DHKEM_X25519_HKDF_SHA256 = 1;
   */
  DHKEM_X25519_HKDF_SHA256 = 1,

  /**
   * @generated from enum value: DHKEM_P256_HKDF_SHA256 = 2;
   */
  DHKEM_P256_HKDF_SHA256 = 2,

  /**
   * @generated from enum value: DHKEM_P384_HKDF_SHA384 = 3;
   */
  DHKEM_P384_HKDF_SHA384 = 3,

  /**
   * @generated from enum value: DHKEM_P521_HKDF_SHA512 = 4;
   */
  DHKEM_P521_HKDF_SHA512 = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(HpkeKem)
proto3.util.setEnumType(HpkeKem, "google.crypto.tink.HpkeKem", [
  { no: 0, name: "KEM_UNKNOWN" },
  { no: 1, name: "DHKEM_X25519_HKDF_SHA256" },
  { no: 2, name: "DHKEM_P256_HKDF_SHA256" },
  { no: 3, name: "DHKEM_P384_HKDF_SHA384" },
  { no: 4, name: "DHKEM_P521_HKDF_SHA512" },
]);

/**
 * @generated from enum google.crypto.tink.HpkeKdf
 */
export enum HpkeKdf {
  /**
   * @generated from enum value: KDF_UNKNOWN = 0;
   */
  KDF_UNKNOWN = 0,

  /**
   * @generated from enum value: HKDF_SHA256 = 1;
   */
  HKDF_SHA256 = 1,

  /**
   * @generated from enum value: HKDF_SHA384 = 2;
   */
  HKDF_SHA384 = 2,

  /**
   * @generated from enum value: HKDF_SHA512 = 3;
   */
  HKDF_SHA512 = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(HpkeKdf)
proto3.util.setEnumType(HpkeKdf, "google.crypto.tink.HpkeKdf", [
  { no: 0, name: "KDF_UNKNOWN" },
  { no: 1, name: "HKDF_SHA256" },
  { no: 2, name: "HKDF_SHA384" },
  { no: 3, name: "HKDF_SHA512" },
]);

/**
 * @generated from enum google.crypto.tink.HpkeAead
 */
export enum HpkeAead {
  /**
   * @generated from enum value: AEAD_UNKNOWN = 0;
   */
  AEAD_UNKNOWN = 0,

  /**
   * @generated from enum value: AES_128_GCM = 1;
   */
  AES_128_GCM = 1,

  /**
   * @generated from enum value: AES_256_GCM = 2;
   */
  AES_256_GCM = 2,

  /**
   * @generated from enum value: CHACHA20_POLY1305 = 3;
   */
  CHACHA20_POLY1305 = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(HpkeAead)
proto3.util.setEnumType(HpkeAead, "google.crypto.tink.HpkeAead", [
  { no: 0, name: "AEAD_UNKNOWN" },
  { no: 1, name: "AES_128_GCM" },
  { no: 2, name: "AES_256_GCM" },
  { no: 3, name: "CHACHA20_POLY1305" },
]);

/**
 * @generated from message google.crypto.tink.HpkeParams
 */
export class HpkeParams extends Message<HpkeParams> {
  /**
   * @generated from field: google.crypto.tink.HpkeKem kem = 1;
   */
  kem = HpkeKem.KEM_UNKNOWN;

  /**
   * @generated from field: google.crypto.tink.HpkeKdf kdf = 2;
   */
  kdf = HpkeKdf.KDF_UNKNOWN;

  /**
   * @generated from field: google.crypto.tink.HpkeAead aead = 3;
   */
  aead = HpkeAead.AEAD_UNKNOWN;

  constructor(data?: PartialMessage<HpkeParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.crypto.tink.HpkeParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kem", kind: "enum", T: proto3.getEnumType(HpkeKem) },
    { no: 2, name: "kdf", kind: "enum", T: proto3.getEnumType(HpkeKdf) },
    { no: 3, name: "aead", kind: "enum", T: proto3.getEnumType(HpkeAead) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HpkeParams {
    return new HpkeParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HpkeParams {
    return new HpkeParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HpkeParams {
    return new HpkeParams().fromJsonString(jsonString, options);
  }

  static equals(a: HpkeParams | PlainMessage<HpkeParams> | undefined, b: HpkeParams | PlainMessage<HpkeParams> | undefined): boolean {
    return proto3.util.equals(HpkeParams, a, b);
  }
}

/**
 * @generated from message google.crypto.tink.HpkePublicKey
 */
export class HpkePublicKey extends Message<HpkePublicKey> {
  /**
   * @generated from field: uint32 version = 1;
   */
  version = 0;

  /**
   * @generated from field: google.crypto.tink.HpkeParams params = 2;
   */
  params?: HpkeParams;

  /**
   * KEM-encoding of public key (i.e., SerializePublicKey() ) as described in
   * https://www.rfc-editor.org/rfc/rfc9180.html#name-cryptographic-dependencies.
   *
   * @generated from field: bytes public_key = 3;
   */
  publicKey = new Uint8Array(0);

  constructor(data?: PartialMessage<HpkePublicKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.crypto.tink.HpkePublicKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "params", kind: "message", T: HpkeParams },
    { no: 3, name: "public_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HpkePublicKey {
    return new HpkePublicKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HpkePublicKey {
    return new HpkePublicKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HpkePublicKey {
    return new HpkePublicKey().fromJsonString(jsonString, options);
  }

  static equals(a: HpkePublicKey | PlainMessage<HpkePublicKey> | undefined, b: HpkePublicKey | PlainMessage<HpkePublicKey> | undefined): boolean {
    return proto3.util.equals(HpkePublicKey, a, b);
  }
}

/**
 * @generated from message google.crypto.tink.HpkePrivateKey
 */
export class HpkePrivateKey extends Message<HpkePrivateKey> {
  /**
   * @generated from field: uint32 version = 1;
   */
  version = 0;

  /**
   * @generated from field: google.crypto.tink.HpkePublicKey public_key = 2;
   */
  publicKey?: HpkePublicKey;

  /**
   * KEM-encoding of private key (i.e., SerializePrivateKey() ) as described in
   * https://www.rfc-editor.org/rfc/rfc9180.html#name-cryptographic-dependencies.
   *
   * @generated from field: bytes private_key = 3;
   */
  privateKey = new Uint8Array(0);

  constructor(data?: PartialMessage<HpkePrivateKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.crypto.tink.HpkePrivateKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "public_key", kind: "message", T: HpkePublicKey },
    { no: 3, name: "private_key", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HpkePrivateKey {
    return new HpkePrivateKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HpkePrivateKey {
    return new HpkePrivateKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HpkePrivateKey {
    return new HpkePrivateKey().fromJsonString(jsonString, options);
  }

  static equals(a: HpkePrivateKey | PlainMessage<HpkePrivateKey> | undefined, b: HpkePrivateKey | PlainMessage<HpkePrivateKey> | undefined): boolean {
    return proto3.util.equals(HpkePrivateKey, a, b);
  }
}

/**
 * @generated from message google.crypto.tink.HpkeKeyFormat
 */
export class HpkeKeyFormat extends Message<HpkeKeyFormat> {
  /**
   * @generated from field: google.crypto.tink.HpkeParams params = 1;
   */
  params?: HpkeParams;

  constructor(data?: PartialMessage<HpkeKeyFormat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "google.crypto.tink.HpkeKeyFormat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: HpkeParams },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HpkeKeyFormat {
    return new HpkeKeyFormat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HpkeKeyFormat {
    return new HpkeKeyFormat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HpkeKeyFormat {
    return new HpkeKeyFormat().fromJsonString(jsonString, options);
  }

  static equals(a: HpkeKeyFormat | PlainMessage<HpkeKeyFormat> | undefined, b: HpkeKeyFormat | PlainMessage<HpkeKeyFormat> | undefined): boolean {
    return proto3.util.equals(HpkeKeyFormat, a, b);
  }
}

