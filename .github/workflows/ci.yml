name: CI

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Lint
        run: make lint

  unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./scripts/tools/install-deps.sh

      - name: Run Unit Tests
        run: npm run test

  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        env:
          GH_TOKEN: ${{ github.token }}
        run: ./scripts/tools/install-deps.sh

      - name: Build DevContainer and run E2E tests
        uses: devcontainers/ci@v0.3
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          push: never
          configFile: .devcontainer/devcontainer.json
          runCmd: |
             scripts/set_python_env.sh && pip install -r requirements.txt
             make demo

      - name: Print CCF logs
        run: cat workspace/sandbox_0/out

  system-stateless:
    name: system / stateless (${{ inputs.use_akv && 'akv' || 'local' }}_keys)
    secrets: inherit # pragma: allowlist secret
    strategy:
      fail-fast: false
      matrix:
        use_akv: [false, true]
    uses: ./.github/workflows/system-tests.yml
    with:
      env: sandbox_local
      use_akv: ${{ matrix.use_akv }}

  system-stateful:
    name: system / stateful (local_keys)
    secrets: inherit # pragma: allowlist secret
    strategy:
      fail-fast: false
      matrix:
        env: [az-cleanroom-aci, acl]
    uses: ./.github/workflows/system-test.yml
    with:
      test_path: test_all_seq
      env: ${{ matrix.env }}
      use_akv: false

  test-az:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log into Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.MANAGED_ID_CLIENT_ID }}
          tenant-id: ${{ vars.MANAGED_ID_TENANT_ID }}
          subscription-id: ${{ vars.SUBSCRIPTION }}

      - name: Install Dependencies
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ./scripts/tools/install-c-aci-testing.sh
          pip install pytest==8.3.3 pytest-xdist==3.6.1 pycryptodome==3.21.0 ccf==5.0.11

      - run: |
          . scripts/ccf/sandbox_local/up.sh
          . scripts/jwt_issuer/aad/up.sh
          ./scripts/kms/js_app_set.sh
          ./scripts/kms/constitution_set.sh --actions governance/constitution/actions/kms.js --resolve governance/constitution/resolve/auto_accept.js
          ./scripts/kms/jwt_issuer_trust.sh --aad
          JWT_B64=$(echo "$JWT" \
            | cut -d '.' -f2 \
            | sed 's/-/+/g; s/_/\//g;')

          # Add padding if necessary
          MOD4=$(( ${#JWT_B64} % 4 ))
          if [ $MOD4 -eq 2 ]; then
            JWT_B64="${JWT_B64}=="
          elif [ $MOD4 -eq 3 ]; then
            JWT_B64="${JWT_B64}="
          fi

          # Decode the JWT
          echo "$JWT_B64" | base64 --decode

          (cd workspace/proposals && rm *constitution* && rm set_js_app.json && cat *)
          ./scripts/kms/endpoints/auth.sh


