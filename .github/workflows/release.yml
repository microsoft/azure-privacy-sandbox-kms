name: Release

on:
  push:
    tags:
      - 'kms-v*'

permissions:
  contents: write
  actions: write
  checks: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set release version
      id: vars
      run: echo "release_version=${GITHUB_REF#refs/tags/kms-v}" >> $GITHUB_ENV

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '22'

    - name: Wait for Running CI Workflows
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        owner="${GITHUB_REPOSITORY%%/*}"
        repo="${GITHUB_REPOSITORY##*/}"
        workflow_id="ci.yml"

        running=""
        while [ "$running" != "0" ]; do
          runs=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs?per_page=1&status=in_progress&branch=main")
          running=$(echo "$runs" | jq -r '.total_count')
          if [ "$running" != "0" ]; then
            echo "Waiting for running CI workflows to complete..."
            sleep 30
          fi
        done

    - name: Trigger CI Workflow
      id: trigger_ci
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: CI
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: main

    - name: Get CI Workflow Run ID
      id: get_run_id
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        set -euo pipefail
        owner="${GITHUB_REPOSITORY%%/*}"
        repo="${GITHUB_REPOSITORY##*/}"
        workflow_id="ci.yml"

        run_id=""
        while [ "$run_id" = "" ]; do
          runs=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$owner/$repo/actions/workflows/$workflow_id/runs?per_page=1&status=in_progress&branch=main")
          run_id=$(echo "$runs" | jq -r '.workflow_runs[0].id')
          if [ "$run_id" = "null" ]; then
            echo "Waiting for CI workflow to start..."
            run_id=""
            sleep 30
          fi
        done
        echo "run_id=$run_id" >> $GITHUB_ENV

    - name: Install dependencies
      run: npm install

    - name: Wait for CI Workflow to Complete
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        RUN_ID: ${{ env.run_id }}
      run: |
        set -euo pipefail
        owner="${GITHUB_REPOSITORY%%/*}"
        repo="${GITHUB_REPOSITORY##*/}"

        conclusion=""
        while [ "$conclusion" = "" ]; do
          run=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$owner/$repo/actions/runs/$RUN_ID")
          echo "Run: $run"  # Debug statement
          conclusion=$(echo "$run" | jq -r '.conclusion')
          echo "Conclusion: $conclusion"  # Debug statement
          if [ "$conclusion" = "null" ]; then
            echo "Waiting for CI workflow to complete..."
            conclusion=""
            sleep 30
          fi
        done

        if [ "$conclusion" != "success" ] && [ "$conclusion" != "cancelled" ]; then
          echo "CI workflow failed with conclusion: $conclusion"
          exit 1
        fi

    - name: Build project
      run: make build

    - name: Generate SBOM
      run: npx cyclonedx-bom -o sbom.xml

    - name: Zip /dist directory
      run: zip -r dist.zip dist

    - name: Fetch PR notes
      id: pr_notes
      run: |
        echo "## Release Notes" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        PRS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&base=${{ github.ref_name }}&sort=updated&direction=desc")
        echo "$PRS" | jq -r '.[] | select(.merged_at != null) | "- " + .title + "\n" + .body' >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## SBOM" >> RELEASE_NOTES.md
        head -c 100000 sbom.xml >> RELEASE_NOTES.md  # Truncate SBOM to avoid exceeding the limit

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: ./RELEASE_NOTES.md
        draft: false
        prerelease: false

    - name: Upload SBOM
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./sbom.xml
        asset_name: sbom.xml
        asset_content_type: application/xml

    - name: Upload dist.zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist.zip
        asset_name: dist.zip
        asset_content_type: application/zip

    - name: Upload RELEASE_NOTES.md
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./RELEASE_NOTES.md
        asset_name: RELEASE_NOTES.md
        asset_content_type: text/markdown